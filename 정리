프로그램명
jdk-8u171-windows-x64
mariadb-10.2.16-winx64
spring-tool-suite-3.9.5.RELEASE-e4.8.0-win32-x86_64

-- 18.07.08
1. 프로그램 설치 및 git hub 연동
2. sts 에 gradle 플러그인 설치
3. mariadb 설치 (설치시 utf-8옵션으로 설치)

-- 18.07.09
1. gradle 플러그인 설치
 - buildship gradle integration -> x 안됨.
 - sts 에선 dashboard에서 플러그인으로 설치해야함. (extension -> gradle support)

* sts에서 github 접속안되는 원인 (1.7에선 안됨, 1.8에선 됨)
 - 이클립스와 다른거 같음.

2. 샘플 프로젝트 생성
 - springboottest (프로젝트이름에 _가 들어가면 생성안됨)

3. 샘플 코드 테스트
 - helloworld출력 (gradle에 기본 dependency만 남겨두고 실행)
 - run as -> spring app -> http://localhost:8080
 - com.handashi.HelloRestController.java

-- 18.07.11
1. spring project로 생성한 프로젝트 샘플을 developPoject 로 이동
 - developPoject Project facets -> web 프로젝트 설정
 - developProject spring tools -> spring Nature 로 변경 
 - configure -> gradle project로 변경
 - gradle 관련 폴더및 파일, src 폴더 복사
 - spring boot app 기동 시켜 샘플 페이지 테스트

-- 18.07.13
1. sts 에서 dashboard 여는법
 - help -> dashboard

2. sts 3.9.5 에서는 gradle이 dashboard에 없다.
 - buildship gradle integration 설치후 gradle ide pack 3.8x 설치

-- 18.07.26

1. jpa 설정
 - 메모리상에 올라가는 DB같이 사용할수 있는 데이터 입출력 모듈
 - compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	runtime('com.h2database:h2')
 - @Entity : 테이블로 보면 됨
 - @Id : pk
 - @GenerateValue : 자동생성값

참고 URL : 
http://millky.com/@origoni/post/1140
https://jdm.kr/blog/121

-- 18.07.27

1. 프로젝트 폴더 구조
 - WebContent, webapp 의 차이
 - WebContent의 경우 이클립스에서 만들어지는 방식
 - webapp의 경우 maven에서 만들어지는 방식
 - 개발자간의 호환성을 위해 webapp 방식 사용
 - 이클립스에선 직접 폴더 만들어야 함.
 - src : 프로그램 소스 파일을 두는 곳
 - main/java : 자바 소스 파일(.java파일)을 두는 곳
 - main/resources : 프로그램을 실행할 때 사용하는 설정 파일(.properties, .xml 등)을 두는 곳
 
 - 직접 만들어야 함. * main/webapp : HTML, CSS, JavaScript, GIF 등 정적 웹 자원을 두는 곳. (JSP파일도 여기에 둠)
 - 직접 만들어야 함. * main/webapp/WEB-INF : 웹 애플리케이션 정보 파일을 두는 곳
 
 - test : 코드를 테스트하는 소스 파일을 두는 곳
 - test/java : 단위 테스트 관련 자바 소스 파일을 두는 곳
 - bin : 소스코드가 컴파일된 *.class 파일, *properties파일, *xml파일 등

2. 이클립스 html5 기본세팅
 - preferences -> Web -> JSP Files -> Editor -> Template -> New
 - jsp for HTML5
<%@ page language="java" contentType="text/html; charset=${encoding}" pageEncoding="${encoding}"%>
<!DOCTYPE html>
<html lang="ko">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=${encoding}">
<title>Insert title here</title>
</head>
<body>

${cursor}

</body>
</html>
 - 기본생성 되는 jsp 파일 UTF-8로 기본세팅
 - preferences -> Web -> JSP Files
 - UTF-8로 변경

3. 이클립스에서 tab대신 space사용
 - preferences -> General -> Editors -> Text Editor -> Insert spaces for tabs 체크
 - preferences -> Java -> Code Style -> formatter -> New (새로운 fomatter 생성) -> Indentation -> space Only로 변경

4. spring jsp 사용하기
 1) 관련 dependency 추가
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('javax.servlet:jstl')
    providedCompile('org.apache.tomcat.embed:tomcat-embed-jasper')
 1) HelloController.java 생성 (/hello 전달받아 name에 값추가해서 view로 넘김)
  - src/main/resources/application.yml 생성
  - 새버전에서는 뷰 매핑을 spring:mvc:view: 로 사용한다. *****************
 2) hello.jsp (전달받은값을 표시)

5. spring velocity 사용하기
 1) jsp 관련 라이브러리 주석처리
 2) html 파일 생성후 vm으로 변경
--- 잘안됨.

-- 18.07.30

1. thymeleaf 설정
 - build.gradle 에 추가 org.springframework.boot:spring-boot-starter-thymeleaf
 - src/main/resources/templates/hello.html 생성

2. tomcat 설정및 java run으로 기동할수 있게 설정
 - build.gradle 에 org.springframework.boot:spring-boot-starter-tomcat 추가
 - 패키지 최상단에 @SpringBootApplication 이 있는 main 메소드 클래스가 있어야 동작
 - 딱히 SpringBootServletInitializer 를 구현한 클래스는 필요없음. (테스트 해봄)

3. bootstrap 설정
 - webjar 사용해서 설치
 - compile 'org.webjars.bower:bootstrap:4.1.3'
 - compile 'org.webjars.bower:jquery:3.3.1'
 - webjar를 사용하게 되면 lib 에 있는 jar를 참조해서 로딩한다.
<link rel="stylesheet" href="/webjars/bootstrap/4.1.3/dist/css/bootstrap.min.css">
<script src="/webjars/jquery/3.3.1/dist/jquery.min.js"></script>
<script src="/webjars/bootstrap/4.1.3/dist/js/bootstrap.min.js"></script>

4. blog sample 페이지 설정
 - compile ('org.webjars.bower:origoni-startbootstrap-clean-blog:1.0.3')
 - 추가후 blog.jsp 생성 (이미지의 경우 오래되어서 404에러 발생)

-- 18.08.24
two -> one

-- 18.11.06
1. sts 에 svn 설치
 - eclipse maketplace : SVN Team Provider 4.0.5 설치후 재시작
 - Window -> Preferences -> Team -> SVN -> SVN Connector : Get Connectors...
   SVN Kit 1.8.14 설치후 재시작

2. RestTemplate 을 이용해서 api 호출 가능
 - 파라미터의 경우 restTemplate.getForObject("http://localhost:8080/getHelloList/{num}", String.class, num); 뒤에 복수로도 붙여줄수 있다.

3. json 변환
 - json to map
   HashMap<String, Object> rs = new ObjectMapper().readValue(result.toString(), HashMap.class);
   map to json
   new ObjectMapper().writeValueAsString(rs);
 